// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DocumentExchange {
    address public owner;
    mapping(bytes32 => bool) public submittedDocuments;

    event DocumentSubmitted(address indexed sender, bytes32 documentHash);
    event DocumentVerified(address indexed sender, bytes32 documentHash);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function submitDocument(bytes32 documentHash) external {
        require(!submittedDocuments[documentHash], "Document already submitted");

        submittedDocuments[documentHash] = true;

        emit DocumentSubmitted(msg.sender, documentHash);
    }

    function verifyDocument(bytes32 documentHash) external onlyOwner {
        require(submittedDocuments[documentHash], "Document not submitted");

        // Implement additional verification logic here

        emit DocumentVerified(msg.sender, documentHash);
    }
}
